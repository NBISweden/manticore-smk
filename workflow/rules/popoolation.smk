rule popoolation_pybedtools_make_bed_targets:
    output:
        bed = temp("{prefix}/{pool_vc}/{region}.{partition}.bed")
    input: bed = "{prefix}/{region}.bed"
    params:
        npart = lambda wildcards: config['workflow']['regions'].get(wildcards.region, {}).get('npart', 1)
    log: "logs/{prefix}/{pool_vc}/{region}.{partition}.log"
    threads: 1
    wrapper: f"{WRAPPER_PREFIX}/bio/pybedtools/make_bed_targets"


rule popoolation_bedtools_repeatmask:
    """bedtools: apply repeat mask coordinates to interval file"""
    output: "{prefix}.rm.{partition}.bed"
    input: left = "{prefix}.{partition}.bed",
           right = config['db']['repeats']
    threads: 1
    log: "logs/{prefix}.rm.{partition}.bed.log"
    wrapper: f"{WRAPPER_PREFIX}/bio/bedtools/subtract"


rule popoolation_samtools_filter_mpileup:
    """Generate filtered samtools mpileup file for a target region for popoolation"""
    output: pileup = temp("{interim_pool}/popoolation/qfilt/{sample}.{region}{repeatmask}.{target}.pileup")
    input: unpack(popoolation_samtools_filter_mpileup_input)
    resources:
        runtime = lambda wildcards, attempt: resources("popoolation_samtools_filter_mpileup", "runtime", attempt)
    params:
        options = get_params("popoolation_samtools_filter_mpileup", "options")
    threads: lambda wildcards: resources("popoolation_samtools_filter_mpileup", "threads")
    log: "logs/{interim_pool}/popoolation/qfilt/{sample}.{region}{repeatmask}.{target}.pileup.log"
    wrapper: f"{WRAPPER_PREFIX}/bio/popoolation/samtools_filter_mpileup"


rule popoolation_filter_pileup_by_gtf:
    """Filter indels from pileup file by using indel gtf generated by popoolation2 output"""
    output:
        pileup = temp("{interim_pool}/popoolation/qfilt/{population}.{sample}.{region}/{prefix}{repeatmask}.noindel.{target}.pileup")
    input:
        gtf = popoolation_filter_pileup_by_gtf_input,
        pileup = "{interim.pool}/popoolation/qfilt/{population}.{sample}.{region}/{prefix}{repeatmask}.{target}.pileup"
    resources:
        runtime = lambda wildcards, attempt: resources("popoolation_filter_pileup_by_gtf", "runtime", attempt)
    params:
        options = get_params("popoolation_filter_pileup_by_gtf", "options")
    threads: lambda wildcards: resources("popoolation_filter_pileup_by_gtf", "threads")
    log: "logs/{interim_pool}/popoolation/qfilt/{population}.{sample}.{region}/{prefix}{repeatmask}.noindel.{target}.pileup.log"
    wrapper: f"{WRAPPER_PREFIX}/bio/popoolation/filter_pileup_by_gtf"


localrules: popoolation_bedtools_repeatmask
