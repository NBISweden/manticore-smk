rule all_popoolation2:
    """Run popoolation2 analyses"""
    input: unpack(all_popoolation2_input)


rule all_popoolation2_raw:
    """Generate raw popoolation2 data"""
    input: unpack(all_popoolation2_raw_input)


# Rules
rule popoolation2_samtools_mpileup:
    """Run samtools mpileup for popoolation2"""
    output: pileup = temp("{interim_pool}/raw/popoolation2/{sex}.{region}.{target}.mpileup{gz}")
    input: unpack(popoolation2_samtools_mpileup_input)
    resources:
        runtime = lambda wildcards, attempt: resources("popoolation2_samtools_mpileup", "runtime", attempt)
    params:
        options = get_params("popoolation2_samtools_mpileup", "options")
    threads: lambda wildcards: resources("popoolation2_samtools_mpileup", "threads")
    log: "logs/{interim_pool}/raw/popoolation2/{sex}.{region}.{target}.mpileup{gz}.log"
    wrapper: f"{WRAPPER_PREFIX}/bio/popoolation2/samtools_mpileup"


rule popoolation2_mpileup2sync_jar:
    """Convert mpileup output to sync format"""
    output: sync = "{results_pool}/raw/popoolation2/{sex}.{region}.{target}.sync{gz}"
    input: mpileup = __INTERIM_POOL__ / "raw/popoolation2/{sex}.{region}.{target}.mpileup.gz"
    resources:
        mem_mb = lambda wildcards, attempt: resources("popoolation2_mpileup2sync_jar", "mem_mb", attempt),
        runtime = lambda wildcards, attempt: resources("popoolation2_mpileup2sync_jar", "runtime", attempt)
    params:
        java_options = get_params("popoolation2_mpileup2sync_jar", "java_options")
    threads: get_params("popoolation2_mpileup2sync_jar", "threads")
    log: "logs/{results_pool}/raw/popoolation2/{sex}.{region}.{target}.sync{gz}.log"
    wrapper: f"{WRAPPER_PREFIX}/bio/popoolation2/mpileup2sync_jar"


rule popoolation2_indel_filtering_identify_indel_regions:
    """Identify indel regions in mpileup file"""
    output: gtf = "{results_pool}/raw/popoolation2.indels/{sex}.{region}.{target}.mpileup{gz}.indels.gtf"
    input: mpileup = __INTERIM_POOL__ / "raw/popoolation2/{sex}.{region}.{target}.mpileup{gz}"
    resources:
        mem_mb = lambda wildcards, attempt: resources("popoolation2_indel_filtering_identify_indel_regions", "mem_mb", attempt),
        runtime = lambda wildcards, attempt: resources("popoolation2_indel_filtering_identify_indel_regions", "runtime", attempt)
    params:
        java_options = get_params("popoolation2_indel_filtering_identify_indel_regions", "java_options")
    threads: get_params("popoolation2_indel_filtering_identify_indel_regions", "threads")
    log: "logs/{results_pool}/raw/popoolation2.indels/{sex}.{region}.{target}.mpileup{gz}.indels.gtf.log"
    wrapper: f"{WRAPPER_PREFIX}/bio/popoolation2/indel_filtering_identify_indel_regions"


rule popoolation2_indel_filtering_filter_sync_by_gtf:
    """Filter sync file by indel gtf input generated by popoolation2_indel_filtering_identify_indel_regions"""
    output: sync = temp("{results}/{group}/analysis/{analysis}/{filternum}_{filtername}_{filtertype}/{sex}.{region}.{target}.sync{gz}")
    input: unpack(get_popoolation2_filter_input),
           #sync = "{results}/{group}/raw/popoolation2/{sex}.{region}.{target}.sync{gz}",
           gtf = popoolation2_filter_pileup_by_gtf_input
    wildcard_constraints:
        filternum = "[0-9]{2}",
        filtertype = "popoolation2_indel_filtering_filter_sync_by_gtf"
    resources:
        mem_mb = lambda wildcards, attempt: resources("popoolation2_indel_filtering_filter_sync_by_gtf", "mem_mb", attempt),
        runtime = lambda wildcards, attempt: resources("popoolation2_indel_filtering_filter_sync_by_gtf", "runtime", attempt)
    params:
        java_options = get_params("popoolation2_indel_filtering_filter_sync_by_gtf", "java_options")
    threads: get_params("popoolation2_indel_filtering_filter_sync_by_gtf", "threads")
    log: "logs/{results}/{group}/analysis/{analysis}/{filternum}_{filtername}_{filtertype}/{sex}.{region}.{target}.sync{gz}.log"
    wrapper: f"{WRAPPER_PREFIX}/bio/popoolation2/indel_filtering_filter_sync_by_gtf"


rule popoolation2_indel_filtering_remove_indels:
    """Remove positions with indels"""
    output: sync = temp("{results}/{group}/analysis/{analysis}/{filternum}_{filtername}_{filtertype}/{sex}.{region}.{target}.sync{gz}")
    input: unpack(get_popoolation2_filter_input)
    wildcard_constraints:
        filternum = "[0-9]{2}",
        filtertype = "popoolation2_indel_filtering_remove_indels"
    resources:
        runtime = lambda wildcards, attempt: resources("popoolation2_indel_filtering_remove_indels", "runtime", attempt)
    params:
        options = get_params("popoolation2_indel_filtering_remove_indels", "options")
    threads: get_params("popoolation2_indel_filtering_remove_indels", "threads")
    log: "logs/{results}/{group}/analysis/{analysis}/{filternum}_{filtername}_{filtertype}/{sex}.{region}.{target}.sync{gz}.log"
    wrapper: f"{WRAPPER_PREFIX}/bio/popoolation2/indel_filtering_remove_indels"


rule popoolation2_subsample_synchronized:
    """Subsample synchronized reads"""
    output:
        sync = temp("{results}/{group}/analysis/{analysis}/{filternum}_{filtername}_{filtertype}/{sex}.{region}.{target}.sync{gz}")
    input: unpack(get_popoolation2_filter_input)
    wildcard_constraints:
        filternum = "[0-9]{2}",
        filtertype = "popoolation2_subsample_synchronized"
    resources:
        runtime = lambda wildcards, attempt: resources("popoolation2_subsample_synchronized", "runtime", attempt)
    params:
        options = lambda wildcards: get_filter_options(wildcards)
    threads: get_params("popoolation2_subsample_synchronized", "threads")
    log: "logs/{results}/{group}/analysis/{analysis}/{filternum}_{filtername}_{filtertype}/{sex}.{region}.{target}.sync{gz}.log"
    wrapper: f"{WRAPPER_PREFIX}/bio/popoolation2/subsample_synchronized"

rule popoolation2_gather_parallel_results:
    """Gather results from parallel analyses"""
    output: analysis = "{interim_pool}/popoolation2/{region}/{prefix}{repeatmask}.{filters}{analysis}.{suffix}"
    input: unpack(popoolation2_gather_parallel_results_input)
    wildcard_constraints:
        analysis = "(w\d+.s\d+.fst|sync_rc|sync_pwc|w\d+.s\d+.fet|mpileup.gz.indels)",
        prefix = "(all|male/all|female/all)",
        filters = "([\.a-z]+\.|)",
        suffix = "(gz|gtf)"
    resources:
        runtime = resources("popoolation2_gather_parallel_results", "runtime")
    params:
        options = get_params("popoolation2_gather_parallel_results", "options")
    log: "logs/{interim_pool}/popoolation2/{region}/{prefix}{repeatmask}.{filters}{analysis}.{suffix}.log"
    threads: get_params("popoolation2_gather_parallel_results", "threads")
    shell:
        "cat {input.analysis} > {output.analysis}"




# * rule popoolation2_samtools_mpileup

# samtools mpileup -l data/metadata/regions/W-non-PAR.popoolation2.2.rm.bed -B data/interim/pool/black/P1878_102/P1878_102.merge.bam data/interim/pool/blue/P1878_104/P1878_104.merge.bam data/interim/pool/red/P1878_106/P1878_106.merge.bam | gzip -v - > data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gz


# * rule popoolation2_indel_filtering_identify_indel_regions


# if [ -e data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gztmppllxrmp5.fifo ]; then rm -f data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gztmppllxrmp5.fifo; fi; mkfifo data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gztmppllxrmp5.fifo; zcat data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gz > data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gztmppllxrmp5.fifo & perl opt/popoolation2-code/indel_filtering/identify-indel-regions.pl --min-count 1% --indel-window 5 --input data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gztmppllxrmp5.fifo --output data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gz.indels.gtf; rm -f data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gztmppllxrmp5.fifo




# * rule popoolation2_indel_filtering_filter_sync_by_gtf

# perl opt/popoolation2-code/indel_filtering/filter-sync-by-gtf.pl  --gtf data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.mpileup.gz.indels.gtf --input data/interim/pool/popoolation2/W-non-PAR/female/all.rm.2.sync --output data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.2.sync



# rule popoolation2_indel_filtering_remove_indels

# perl -pe '$_=~s/(\d+:\d+:\d+:\d+:0:)\d+(?)/${1}0/g' data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.2.sync > data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.2.sync


### Remaining
# rule popoolation2_subsample_synchronized

# perl opt/popoolation2-code/subsample-synchronized.pl --method withoutreplace --target-coverage 25 --max-coverage 70 --input data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.2.sync --output data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.sync


# ### Stats

# rule popoolation2_fst_sliding

# perl opt/popoolation2-code/fst-sliding.pl --suppress-noninformative --min-count 2 --min-coverage 25 --max-coverage 10000 --min-covered-fraction .1 --pool-size 25 --window-size 100000 --step-size 100000 --input data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.sync --output data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.w100000.s100000.fst; gzip -f -v data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.w100000.s100000.fst



# rule popoolation2_fisher_test

# perl opt/popoolation2-code/fisher-test.pl --suppress-noninformative --min-count 2 --min-coverage 25 --max-coverage 10000 --min-covered-fraction .1 --window-size 10000 --step-size 10000 --input data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.sync --output data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.w10000.s10000.fet; gzip -f -v data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.w10000.s10000.fet

# rule popoolation2_snp_frequency_diff

# perl opt/popoolation2-code/snp-frequency-diff.pl --min-count 2 --min-coverage 25 --max-coverage 10000 --input data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.sync --output-prefix data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.sync; gzip -f -v data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.sync_rc data/interim/pool/popoolation2/W-non-PAR/female/all.rm.masked.clean.ds.2.sync_pwc;
